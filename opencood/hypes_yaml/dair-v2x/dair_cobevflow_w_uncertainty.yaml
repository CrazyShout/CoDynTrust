name: dair_cobevflow_w_uncertainty_HybridFusion_wo_rescale
data_dir: "my_dair-v2x/v2x_c/cooperative-vehicle-infrastructure"
root_dir: "my_dair-v2x/v2x_c/cooperative-vehicle-infrastructure/train.json"
validate_dir: "my_dair-v2x/v2x_c/cooperative-vehicle-infrastructure/val.json"
test_dir: "my_dair-v2x/v2x_c/cooperative-vehicle-infrastructure/val.json"

noise_setting:
  add_noise: False
  args: 
    pos_std: 0.2
    rot_std: 0.2
    pos_mean: 0
    rot_mean: 0

dataset: &dataset "dairv2x"

comm_range: 100000
num_sweep_frames: &past_k 2
time_delay: 0
binomial_n: 10
binomial_p: 0.3


with_history_frames: True
is_generate_gt_flow: False # 生成GT Flow 用于去训练flow estimate
viz_bbx_flag: &viz_bbx_flag False

is_single_pre_trained:
  pre_train_flag: True
  pre_train_fix: True 
  pre_train_path: /public/home/lilingzhi/xyj/CoAlign/opencood/logs/dairv2x_pointpillar_uncertainty_late_fusion_2024_07_03_14_39_21
  pre_train_epoch: 58

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 4
  epoches: 60
  eval_freq: 1
  save_freq: 1
  max_cav: &max_cav 2
  supervise_single_flag: False

fusion:
  core_method: 'IntermediateFusionDatasetDAIRIrregularFlow' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  args:
    proj_first: false
    clip_pc: false

# preprocess-related
preprocess:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.4, 0.4, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav. Format: xyzxyz minmax
  cav_lidar_range: &cav_lidar [-100.8, -40, -3, 100.8, 40, 1]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 4.5
    w: 2
    h: 1.56
    r: &anchor_yaw [0, 90]
    feature_stride: 2
    num: &achor_num 2
    # 以下为yaml导入时计算得到
    # vw: 0.4
    # vh: 0.4
    # vd: 4
    # W: 504
    # H: 200
    # D: 1
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.2
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15
  dir_args: &dir_args
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: *anchor_yaw

# model related
model:
  core_method: point_pillar_cobevflow_w_uncertainty
  
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *achor_num
    max_cav: *max_cav
    compression: 0 # compression rate
    backbone_fix: True
    design_mode: 0 # 设计模式定为5
    num_sweep_frames: *past_k
    viz_bbx_flag: *viz_bbx_flag
    use_uncertainty_guide: True

    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]
    point_pillar_scatter:
      num_features: 64
      # grid_size: [504, 200, 1] 读取yaml时加入

    base_bev_backbone:
      resnet: true
      use_dropout: true
      dropout_enable: true # 这个会使得单车在train以及test的时候dropout都开启 协同训练的时候用于MC Dropout
      layer_nums: &layer_nums [3, 4, 5]
      layer_strides: [2, 2, 2]
      num_filters: &num_filters [128, 256, 512]
      upsample_strides: &upsample_strides [1, 2, 4]
      num_upsample_filter: &num_upsample_filter [128, 128, 128]
      compression: 0
      voxel_size: *voxel_size

    fuse_bev_backbone:
      resnet: true
      use_dropout: true # fused部分是否开启dropout 开启后在验证以及测试的时候不会开启
      layer_nums: *layer_nums
      layer_strides: [2, 2, 2]
      num_filters: *num_filters
      upsample_strides: *upsample_strides
      num_upsample_filter: *num_upsample_filter
      compression: 0
      voxel_size: *voxel_size

    shrink_header:
      use_atten: true
      kernal_size: [ 3 ]
      stride: [ 1 ]
      padding: [ 1 ]
      dim: [ 256 ]
      input_dim: 384 # 128 * 3 
    
    # dcn:
    #   in_channels: [384]
    #   out_channels: [256]
    #   stride: [1]
    #   padding: [1]
    #   kernel_size : [3]
    #   n_blocks: 1

    rain_model: # fusion_args:
      voxel_size: *voxel_size
      downsample_rate: 1
      in_channels: 256
      n_head: 8
      dropout_rate: 0
      only_attention: true
      communication:
        round: 1
        thre: 0.01
        gaussian_smooth:
          k_size: 5
          c_sigma: 1.0
      agg_operator:
        mode: 'HybridFusion' # MAX, Transformer, ATTEN
        feature_dim: 256
        ms_h: [252, 126, 63]
        ms_w: [100, 50, 25]
      multi_scale: true
      layer_nums: *layer_nums
      num_filters: *num_filters
      # debug for 多尺度hybrid
      # upsample_strides: *upsample_strides
      # num_upsample_filter: *num_upsample_filter
    dir_args: *dir_args

    uncertainty_dim: &uncertainty_dim 3
    re_parameterization: true
    mc_dropout: # 单车MC Dropout
      dropout_rate: 0.1
      inference_stage: true
      inference_num: 10

      tp_score_mean: 0.6469 # 0.6251
      tp_score_std: 0.1571 # 0.1549
      tp_data_ucls_mean: 0.0617 # 0.1047
      tp_data_ucls_std: 0.0140 # 0.0225
      tp_model_ucls_mean: 0.8582 # 0.8793
      tp_model_ucls_std: 0.1207 # 0.1095
      data_ureg_mean: 2.1335 # 6.3410
      data_ureg_std: 0.6666 # 1.9687
      model_ureg_mean: 0.0489 # 0.0441
      model_ureg_std: 0.0222 # 0.0207

      dairv2x: true

    matcher:
      ego_mask: false

      # dataset: *dataset
      score_reliable: 0.6469
      u_cls_data_reliable: 0.8123
      u_cls_model_reliable: 0.8229
      u_reg_data_reliable: -0.5297
      u_reg_model_reliable: -0.3940

loss:
  core_method: point_pillar_tc_loss
  args:
    cls_weight: 1.0
    reg: 2.0
    # backbone_fix: True # 这个一旦固定就会去算flow estimate的损失

    dir_args: 
      dir_weight: 0.2
      args: *dir_args
      anchor_yaw: *anchor_yaw

optimizer:
  core_method: AdamW
  lr: 0.002
  args:
    eps: 1e-10
    weight_decay: 1e-4

  # core_method: Adam
  # lr: 0.002
  # args:
  #   eps: 1e-10
  #   weight_decay: 1e-4

  # core_method: Ranger21
  # lr: 0.0005
  # args:
  #   eps: 1e-10
  #   weight_decay: 1e-3
  #   # num_epochs: *epoches


lr_scheduler:
  # core_method: cosineannealwarm # step, multistep, exponential and cosineannealwarm support
  # epoches: *epoches
  # warmup_lr: 2e-5
  # warmup_epoches: 10
  # lr_min: 5e-6

  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 25, 40]

  # core_method: cosineannealinglr #step, multistep and Exponential support
  # T_max: 20
  # eta_min: 2e-5

  # core_method: ExponentialLR #step, multistep and Exponential support
  # gamma: 0.9

